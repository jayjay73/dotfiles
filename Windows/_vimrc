" Jan's vimrc
"
" vim: set foldmethod=marker:

" source system wide vimrc
if filereadable("/etc/vimrc")
    source /etc/vimrc
endif
if filereadable("/usr/local/etc/vim/vimrc")
    source /usr/local/etc/vim/vimrc
endif
"" Windows
"if filereadable("$VIMRUNTIME/../_vimrc")
"    source $VIMRUNTIME/../_vimrc
"endif

set langmenu=en_US.UTF-8    " sets the language of the menu (gvim)
language en_US.UTF-8        " sets the language of the messages / ui (vim)

set nocompatible
set backspace=indent,eol,start
set history=1000	" keep 200 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line

if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

if has("gui_running")
    set lines=65 columns=140
    if has("gui_gtk2")
        "set guifont=Inconsolata\ 12
    elseif has("gui_macvim")
        "set guifont=Menlo\ Regular:h14
    elseif has("gui_win32")
        set guifont=Courier\ New:h10:cANSI
        if has("clipboard")
            " CTRL-X and SHIFT-Del are Cut
            noremap <C-X>           "+x
            noremap <S-Del>         "+x

            " CTRL-C and CTRL-Insert are Copy
            vnoremap <C-C>          "+y
            vnoremap <C-Insert>     "+y

            " CTRL-V and SHIFT-Insert are Paste
            map! <C-V>              <S-Insert>
            map <S-Insert>          "+gP

            "cmap <C-V>	            <C-R>+
            "cmap <S-Insert>        <C-R>+
        endif
    endif
endif

if has("autocmd")
    " jump to the last position when reopening a file
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    " expand all folds
    autocmd BufWinEnter * normal zR
    " load indentation rules and plugins according to the detected filetype.
    filetype plugin indent on
    " syntax highlighting for TT2 files.
    autocmd BufNewFile,BufRead *.tt setf tt2
    " syntax highlighting for Jenkinsfile.
    au BufNewFile,BufRead Jenkinsfile setf groovy
endif

" soft tab indentation
set expandtab
set shiftwidth=4
set softtabstop=4

" hard tabs
"set shiftwidth=4
"set tabstop=4

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set smartcase           " Do smart case matching
set incsearch           " Incremental search
"set autowrite          " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
if has('mouse')
    set mouse=a         " Enable mouse usage (all modes)
endif

set modeline
set modelines=5

" non-sucky colors?
colorscheme torte
highlight Folded term=standout ctermbg=black ctermfg=white
highlight Comment term=bold ctermfg=darkblue
highlight PreProc term=underline cterm=bold ctermfg=lightcyan
highlight Identifier term=underline cterm=bold ctermfg=lightgreen

" help by keyword under cursor
function PassWordUnderCursor()
    "if !empty($STY)
    "    " we are in screen
    "    execute "!echo -en '\033k'".shellescape("vimhelp: " . expand("<cword>"), 1)"'\033\\'"
    "    redraw!
    "    sleep 500m
    "    execute "!echo -en '\033k'".shellescape("vim: %")"'\033\\'"
    "    redraw!
    "else
    "    "execute "!echo -en '\033]2;'".shellescape("vimhelp: " . expand("<cword>"), 1)"'\007'"
    "    execute "!echo -en '\033]2;'".shellescape("vimhelp: https://www.gnu.org/software/bash/manual/bash.html#index-" . expand("<cword>"), 1)"'\007'"
    "    redraw!
    "    sleep 500m
    "    execute "!echo -en '\033]2;'".shellescape("vim: %")"'\007'"
    "    redraw!
    "endif
    execute "!$HOME/bin/vim-url-router.sh " . shellescape(expand("<cword>"), 1) . " " . shellescape(expand(&filetype)) . " " .shellescape("%")
    redraw!
endfunction
nnoremap <F1> :silent! :call PassWordUnderCursor()<CR><C-L>

" set up menu bar icons and hot keys for TrotoiseGit
if has("gui_running")
    if has("gui_win32")
        function TortoiseCommit()
            if &mod
                "echo "Warning: unsaved changes in buffer"
                echo "saving buffer..."
                write
            endif

            let myfiletocommit = expand('%:p')
            let filechanged = system("git diff --name-only " . myfiletocommit)
            if filechanged != ''
                silent !start "C:\Progra~1\TortoiseGit\bin\TortoiseGitProc.exe" /command:commit /path:"%" /notempfile
            else
                echo "local file not modified: nothing to do"
            endif
        endfunction
        function TortoiseSync()
            silent !start "C:\Progra~1\TortoiseGit\bin\TortoiseGitProc.exe" /command:sync /path:"%" /notempfile
        endfunction
        nnoremap <F9> :call TortoiseCommit()<CR>
        nnoremap <F10> :call TortoiseSync()<CR>
        amenu ToolBar.-sep8- <Nop>
        amenu ToolBar.arrow_turn_right :call TortoiseCommit()<CR>
        amenu ToolBar.arrow_refresh :call TortoiseSync()<CR>
    endif
endif

set background=dark

let mojo_highlight_data = 1
